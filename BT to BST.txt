#include<bits/stdc++.h>
#include<iostream>
using namespace std;
struct node
{
  int data;
  node* left;
  node* right;
};
node* newNode(int key){
    node* temp=new node;
    temp->data=key;
    temp->left=temp->right=NULL;;
    return temp;
}

void print(node* root)
{
    if(root==NULL)
    return;
    
    if(root->left) print(root->left);
    cout<<root->data<<" ";
    if(root->right) print(root->right);
}deque<int> d;
void copy(node* root)
{   
    if(root==NULL)
    return ;
    copy(root->left);
    d.push_back(root->data);
    copy(root->right);
   
    
}
node* paste(node* root)
{
    if(root==NULL)
    return NULL;
   root->left=paste(root->left);
   root->data=d.front();
   d.pop_front();
   root->right=paste(root->right);
   
    return root;
}
node* binaryTreeToBST (node* root)
{   copy(root);
    
    sort(d.begin(),d.end());
     
    root=paste(root);
    return root;
}
int main()
{
    struct node *root = NULL;
 
    /* Constructing tree given in the above figure
          10
         /  \
        30   15
       /      \
      20       5   */
    root = newNode(10);
    root->left = newNode(30);
    root->right = newNode(15);
    root->left->left = newNode(20);
    root->right->right = newNode(5);
 print (root);
    // convert Binary Tree to BST
    root=binaryTreeToBST (root);
 
    printf("Following is Inorder Traversal of the converted BST: \n");
 print (root);
 
    return 0;
}