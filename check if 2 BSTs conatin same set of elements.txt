#include<bits/stdc++.h>
using namespace std;
struct node
{
    int data;
    node* right;
     node* left;
};
node* newNode(int key)
{
    node* temp = new node;
    temp->data=key;
    temp->left=temp->right=NULL;
    return temp;
}
node* insert (node* root,int key)
{
    if(root==NULL)
    return newNode(key);
    if(root->data>key) root->left=insert(root->left,key);
    if(root->data<key) root->right=insert(root->right,key);
    return root;
}
vector <int> v1,v2;
void inorder(node* root,int k)
{   
if(k=0)
{
    if(root==NULL) return;
    inorder(root->left,k);
    v1.push_back(root->data);
    inorder(root->right,k);
    
}
else
{
    if(root==NULL) return;
    inorder(root->left,k);
    v2.push_back(root->data);
    inorder(root->right,k);
}
}

bool checkBSTs(node* root1,node* root2)
{
    
    inorder(root1,0);
    inorder(root2,1);
    for(int i=0;i<v1.size();i++)
    {
        if(v1[i]!=v2[i]) return false;
    }
    return true;
    
    
}
int main()
{ 
    // First BST
    node* root1 = newNode(15);
    root1->left = newNode(10);
    root1->right = newNode(20);
    root1->left->left = newNode(5);
    root1->left->right = newNode(12);
    root1->right->right = newNode(25);
     
    // Second BST
     node* root2 = newNode(15);
    root2->left = newNode(12);
    root2->right = newNode(20);
    root2->left->left = newNode(5);
    root2->left->left->right = newNode(10);
    root2->right->right = newNode(25);
     
    // check if two BSTs have same set of elements
    if (checkBSTs(root1, root2))
        cout << "YES";
    else
        cout << "NO";
    return 0;        
}
