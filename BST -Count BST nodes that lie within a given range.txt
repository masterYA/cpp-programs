#include<bits/stdc++.h>
using namespace std;
struct node
{
    int data;
    node* right;
     node* left;
};
node* newNode(int key)
{
    node* temp = new node;
    temp->data=key;
    temp->left=temp->right=NULL;
    return temp;
}
struct Info
{
  int size;
  int MIN;
  int MAX;
  bool isBST;
  int ans;
};
Info largestBST(node* root)
{
    if(root==NULL)
    return {0,INT_MIN,INT_MAX,true,0};
    if(root->left==NULL and root->right==NULL)
    return {1,root->data,root->data,true,1};
    
    Info l=largestBST(root->left);
    Info r=largestBST(root->right);
    
    Info parent;
    parent.size=(1 + l.size + r.size);
    
    if(l.isBST and r.isBST and l.MAX<root->data and r.MIN>root->data)
    {
        parent.MIN = min(l.MIN,min(root->data,r.MIN));
        parent.MAX = max(r.MAX,max(root->data,l.MAX));
        parent.isBST=true;
        parent.ans=parent.size;
        return parent;
    }
    
        parent.ans=max(l.ans,r.ans);
        parent.isBST=false;
        return parent;
    
}
void getCount(node* root,int l, int h,int *count)
{   
    if(root==NULL) return;
    getCount(root->left,l,h,count);
    if(root->data>=l and root->data<= h)  (*count)++;
    getCount(root->right,l,h,count);
    return;
}
int main()
{
    // Let us construct the BST shown in the above figure
    node *root        = newNode(10);
    root->left        = newNode(5);
    root->right       = newNode(50);
    root->left->left  = newNode(1);
    root->right->left = newNode(40);
    root->right->right = newNode(100);
    /* Let us constructed BST shown in above example
          10
        /    \
      5       50
     /       /  \
    1       40   100   */
    int l = 5;
    int h = 45;
    int count=0;
    cout << "Count of nodes between [" << l << ", " << h
         << "] is ";
    getCount(root, l, h,&count);
    cout<<count;
    return 0;
}

 