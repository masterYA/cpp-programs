#include<bits/stdc++.h>
using namespace std;

struct node{
    int data;
    node* right;
    node* left;
};

struct node* root=NULL;
node* newNode(int key)
{
    node *temp= new node;
    temp->data=key;
    temp->left=NULL;
    temp->right=NULL;
    return temp;
}

void insert(int key)
{   if(root==NULL)
    root=newNode(key);
    
    else{
    queue <node*> q;
    q.push(root);
    while(!q.empty())
    {
        node* temp=q.front();
        q.pop();
        if(!temp->left)
        {
            temp->left=newNode(key);
            break;
        }else q.push(temp->left);
        
        if(!temp->right)
        {
            temp->right=newNode(key);
            break;
        }else q.push(temp->right);
    }
    }
}
int delete_deepest()
{   node* t;
    int result;
    queue<node*> q1;
    q1.push(root);
    while(!q1.empty())
    {
        node* temp=q1.front();
        
        if(temp->left) q1.push(temp->left);
        if(temp->right) q1.push(temp->right);
        if(temp->left || temp->right) t=temp;
      
        result=temp->data;
        q1.pop();
    }
    if(t->left->data==result)
    t->left=NULL;
    if(t->right->data==result)
    t->right=NULL;
    return result;
}
void DELETE(int data)
{
    queue<node*> q;
    q.push(root);
    while(!q.empty())
    {
        node* temp=q.front();
        q.pop();
        if(temp->left->data==data)
        {
            temp->left->data=delete_deepest();
            return;
        }else q.push(temp->left);
        if(temp->right->data==data)
        {
            temp->right->data=delete_deepest();
           return;
        }else q.push(temp->right);
    }
}
void print_inorder(node *temp)
{
    if(temp==NULL)
    return;
    print_inorder(temp->left);
    cout<<temp->data<<" ";
    print_inorder(temp->right);
}
int main()
{
    insert(13);
    insert(12);
    insert(10);
    insert(4);
    insert(19);
    insert(16);
    insert(9);

    cout << "before delete";
    print_inorder(root);
    
    DELETE(12);
    
    cout << "after delete";
    print_inorder(root);
    return 0;
}