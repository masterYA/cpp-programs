#include<bits/stdc++.h>
using namespace std;
void heapify(int arr[],int n, int i)
{
    int largest=i;
    int l=2*i+1;
    int r=2*i+2;
    if(l<n and arr[l]> arr[largest])
        largest=l;
    if(r<n and arr[r]>arr[largest])
        largest=r;
    if(largest!=i)
    {
        swap(arr[i],arr[largest]);
        heapify(arr,n,largest);
    }
    
}
int extractMax(int arr[],int* heap_size)
{
    if(*heap_size==1)
    {
        *heap_size--;
        return arr[0];
    }
    if(*heap_size<=0)
    return INT_MAX;
    int root=arr[0];
    arr[0]=arr[*heap_size];
    heap_size--;
    heapify(arr,*heap_size,0);
    return root;
}
void kLargest(int arr[],int n, int k)
{
    for(int i=2*n-1;i>=0;i--)
    heapify(arr,n,i);
    int heap_size=n;
    for(int i=0;i<k;i++)
    cout<<extractMax(arr,&heap_size)<<" ";
}

 
int main()
{
    int arr[] = {1, 23, 12, 9, 30, 2, 50};
    int n = sizeof(arr)/sizeof(arr[0]);
    int k = 3;
    kLargest(arr, n, k);
}
 