#include<bits/stdc++.h>
using namespace std;
 struct node{
     int data;
     node* left;
     node* right;
 };
node* newNode(int data)
{
     node* temp = new node;
   temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
 
    return(temp);
}
void inorder(node* root)
{
    if(root==NULL)
    return;
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}
void merge(node* root1, node* root2)
{
    stack <node*> s1,s2;
    node* curr1= root1;
    node* curr2=root2;
    
    while(!s1.empty() || !s2.empty() || curr1!=NULL || curr2!=NULL)
    {
        if(curr1!=NULL || curr2!=NULL)
        {
            if(curr1!=NULL) 
            {
                s1.push(curr1);
                curr1=curr1->left;
            }
            if(curr2!=NULL)
            {
                s2.push(curr2);
                curr2=curr2->left;
            }
        }
        else
        {
            if(s1.empty())
            {
                while(!s2.empty())
                {
                    curr2=s2.top();
                    s2.pop();
                    curr2->left=NULL;
                    inorder(curr2);
                }return;
            }
            if(s2.empty())
            {
                while(!s1.empty())
                {
                    curr1=s1.top();
                    s1.pop();
                    curr1->left=NULL;
                    inorder(curr1);
                }return;
            }
            curr1=s1.top();
            curr2=s2.top();
            if(curr1->data<curr2->data)
            {
                s1.pop();
                cout<<curr1->data<<" ";
                curr1=curr1->right;
                curr2=NULL;
            }
            else
            {
                s2.pop();
                cout<<curr2->data<<" ";
                curr2=curr2->right;
                curr1=NULL;
            }
        }
        
    }
}
int main()
{
    struct node  *root1 = NULL, *root2 = NULL;
 
    /* Let us create the following tree as first tree
            3
          /  \
         1    5
     */
    root1 = newNode(3);
    root1->left = newNode(1);
    root1->right = newNode(5);
 
    /* Let us create the following tree as second tree
            4
          /  \
         2    6
     */
    root2 = newNode(4);
    root2->left = newNode(2);
    root2->right = newNode(6);
 
    // Print sorted nodes of both trees
    merge(root1, root2);
 
    return 0;
}
