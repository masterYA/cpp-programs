#include<bits/stdc++.h>
using namespace std;
 struct node{
     int data;
     node* left;
     node* right;
 };
node* newNode(int data)
{
     node* temp = new node;
   temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
 
    return(temp);
}vector<int> v;
void inorder(node* root)
{
    if(root==NULL) return;
    inorder(root->left);
    v.push_back(root->data);
    inorder(root->right);
  
}
node* construct(int start,int end)
{   if(start>end) return NULL;
    int mid=(start+end)/2;
    node* root= newNode(v[mid]);
    root->left=construct(start,mid-1);
    root->right=construct(mid+1,end);
    return root;
}
node* mergeTrees(node* root1,node*root2)
{
    inorder(root1);
    inorder(root2);
    sort(v.begin(),v.end());
    return construct(0,v.size()-1);
}
void printInorder(node* root)
{
     if(root==NULL) return;
   printInorder(root->left);
   cout<<root->data<<" ";
   printInorder(root->right);
}
int main()
{
    /* Create following tree as first balanced BST
           100
          /  \
        50    300
       / \
      20  70
    */
    struct node *root1  = newNode(100);
    root1->left         = newNode(50);
    root1->right        = newNode(300);
    root1->left->left   = newNode(20);
    root1->left->right  = newNode(70);
 
    /* Create following tree as second balanced BST
            80
           /  \
         40   120
    */
    struct node *root2  = newNode(80);
    root2->left         = newNode(40);
    root2->right        = newNode(120);
 
    struct node* mergedTree = mergeTrees(root1, root2);
 
    printf ("Following is Inorder traversal of the merged tree \n");
    printInorder(mergedTree);
 
   
    return 0;
}